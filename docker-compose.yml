version: '3.10'

services:
  web:
    # Берем Dockerfile из каталога app
    build: ./my_app
    # Запускаем тестовый сервер
    command: python manage.py runserver 0.0.0.0:8000
    # куда будут помещены данные из каталога app
    volumes:
      - ./my_app/:/usr/src/app/
    # Открываем порт 8000 внутри и снаружи
    ports:
      - 8000:8000
    # Файл содержащий переменные для контейнера
    env_file:
      - ./.env.dev
  db:
    # Образ и версия базы, которую мы будем использовать
    image: postgres:12.0-alpine
    # Внешний том(volume) и место где он будет подключен внутри контейнера
    volumes:
      - postgres_volume:/var/lib/postgresql/data/
    environment:
      # Учетные данные, которые можно будет переопределить
      - POSTGRES_USER=django_user
      - POSTGRES_PASSWORD=django_password
      - POSTGRES_DB=django_db

  redis:
    image: redis:7.0.5-alpine
    hostname: redis

  celery:
    build: ./my_app  
    container_name: celery
    env_file: 
      - ./.env.dev
    depends_on:
      - web
      - redis
    command: celery -A celery_app worker --loglevel=info  
    restart: always

  flower:
    build: ./my_app
    hostname: flower
    env_file:
      - ./.env.dev
    command: celery -A celery_app flower 
    volumes:
      - ./my_app:/my_app
    links:
      - redis
    depends_on:
      - redis
    ports:
      - "5555:5555"




volumes:
  postgres_volume:
  #static_volume:
  #media_volume: